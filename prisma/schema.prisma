generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  password      String
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  profile       Profile?
  enrollments   Enrollment[]
  activities    Activity[]
  clubRequests  ClubRequest[]
}

model Club {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
  events      Event[]
  clubRequests ClubRequest[]
}

model Event {
  id          String       @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String?
  image       String?
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  clubId      String
  club        Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?
  location    String?
  website     String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Membership {
  id                String   @id @default(cuid())
  userId            String
  clubId            String
  status            String   @default("pending")
  applicationDescription String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  club              Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId])
  @@index([userId])
  @@index([clubId])
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  details   String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ClubRequest {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  club       Club     @relation(fields: [clubId], references: [id])
  clubId     String
  status     String   @default("pending") // 'pending', 'approved', 'rejected'
  createdAt  DateTime @default(now())
}
